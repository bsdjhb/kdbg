# $Yahoo: //depot/jhb/tools/ygdb4#4 $
# General kernel macros

# Macros
set $PID_MAX = 99999

set $P_CONTROLT = 0x2
set $P_INMEM = 0x4
set $P_PPWAIT = 0x10
set $P_SINTR = 0x80
set $P_SYSTEM = 0x200
set $P_TRACED = 0x800
set $P_WEXIT = 0x02000
set $P_JAILED = 0x1000000

set $SIDL = 1
set $SRUN = 2
set $SSLEEP = 3
set $SSTOP = 4
set $SZOMB = 5

set $VROOT = 0x0001
set $VTEXT = 0x0020
set $VSYSTEM = 0x0080
set $VDOOMED = 0x40000
set $VFREE = 0x80000

set $CTLTYPE = 0xf
set $CTLTYPE_NODE = 1

set $LK_WAITDRAIN = 0x00080000

# Number of chars output by %p
set $PTRWIDTH = (sizeof(void *) * 2 + 2)

# Lookup a process specified via $arg0.  We first check to see if it
# is a valid PID, if not, we assume it is a pointer to a struct proc.
# If it looks like a PID, we walk the process lists to find it.  The
# proc pointer is returned in $arg1.
define lookup_proc
    set $_pid = (int)$arg0
    set $arg1 = (struct proc *)$arg0
    if ($_pid <= $PID_MAX)
        set $_zomb = 0
	set $_p = allproc.lh_first
	while ($_p)
	    if ($_p->p_pid == $_pid)
		set $arg1 = $_p
		set $_p = 0
	    else
		set $_p = $_p->p_list.le_next
		if ($_p == 0 && $_zomb == 0)
		    set $_p = zombproc.lh_first
		    set $_zomb = 1
		end
	    end
	end
    end
end

# formatting helper
# spaces <count>
define spaces
    set $_count = $arg0
    while (--$_count >= 0)
	printf " "
    end
end

# procstate <p>
# Helper function for 'ps' to dump process state string
define procstate
    # First determine the primary process state
    if ($arg0->p_stat == $SIDL)
        printf "N"
    end
    if ($arg0->p_stat == $SRUN)
        printf "R"
    end
    if ($arg0->p_stat == $SSLEEP)
	if ($arg0->p_flag & $P_SINTR)
	    printf "S"
	else
	    printf "D"
	end
    end
    if ($arg0->p_stat == $SSTOP)
	    printf "T"
    end
    if ($arg0->p_stat == $SZOMB)
	    printf "Z"
    end

    # Extra states
    set $i = 5
    if (!($arg0->p_flag & $P_INMEM))
	printf "W"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_TRACED)
	printf "X"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_WEXIT && $arg0->p_stat != $SZOMB)
	printf "E"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_PPWAIT)
	printf "V"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_SYSTEM || $p->p_lock > 0)
	printf "L"
	set $i = $i - 1
    end
    if ($arg0->p_pgrp != 0 && $arg0->p_pgrp->pg_session != 0 && \
	$arg0->p_pgrp->pg_session->s_leader == $arg0 && $i > 0)
	printf "s"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_CONTROLT && $i > 0)
	printf "+"
	set $i = $i - 1
    end
    if ($arg0->p_flag & $P_JAILED && $i > 0)
	printf "J"
	set $i = $i - 1
    end
    while ($i != 0)
	printf " "
	set $i = $i - 1
    end
end

# dumpproc <proc>
# ps helper to dump info about a given process
define dumpproc
    set $pp = $arg0.p_pptr
    if ($pp == 0)
	set $pp = $arg0
    end
    if ($arg0.p_cred == 0)
	set $uid = 0
    else
	set $uid = $arg0.p_cred->p_ruid
    end
    if ($arg0.p_pgrp == 0)
	set $pgid = 0
    else
	set $pgid = $arg0.p_pgrp->pg_id
    end
    printf "%5d %5d %5d %5d ", $arg0.p_pid, $pp->p_pid, $pgid, $uid

    printf " "
    procstate $arg0
    printf " "

    if ($arg0->p_stat == $SSLEEP)
	printf " %-8.8s %p ", $arg0->p_wmesg, $arg0->p_wchan
    else
	if ($arg0->p_stat == $SRUN && $arg0->p_oncpu != 0xff)
	    printf " CPU %2d   ", $arg0->p_oncpu
	else
	    printf "          "
	end
	spaces $PTRWIDTH
	printf " "
    end
    if ($arg0->p_flag & $P_SYSTEM)
	printf "["
    end
    printf "%s", $arg0->p_comm
    if ($arg0->p_flag & $P_SYSTEM)
	printf "]"
    end
    printf "\n"
end

# ps: equivalent of the userland command
define ps
    set $nproc = nprocs
    set $p = allproc.lh_first
    printf "  pid  ppid  pgrp   uid   state   wmesg   "
    set $foo = ($PTRWIDTH - 5) / 2
    spaces $foo
    printf "wchan"
    set $foo = $PTRWIDTH - 5 - $foo
    spaces $foo
    printf " cmd\n"
    while (--$nproc >= 0)
	dumpproc $p
	set $p = $p.p_list.le_next
	if ($p == 0 && $nproc > 0)
	    set $p = zombproc.lh_first
	end
    end
end
document ps
Show process status without options. 
end

# qps: "quick" ps skips any procs that are asleep
define qps
    set $nproc = nprocs
    set $p = allproc.lh_first
    printf "  pid  ppid  pgrp   uid   state   wmesg   "
    set $foo = ($PTRWIDTH - 5) / 2
    spaces $foo
    printf "wchan"
    set $foo = $PTRWIDTH - 5 - $foo
    spaces $foo
    printf " cmd\n"
    while (--$nproc >= 0)
	if ($p.p_stat != $SSLEEP)
	    dumpproc $p
	end
	set $p = $p.p_list.le_next
	if ($p == 0 && $nproc > 0)
	    set $p = zombproc.lh_first
	end
    end
end
document qps
Show process status of non-idle processes without options. 
end

# dmesg: print msgbuf.  Can take forever.
define dmesg
printf "%s", msgbufp->msg_ptr
end
document dmesg
Print the system message buffer (dmesg) This can take a long time due to the time it takes to transmit the data across a serial line and even on a firewire connection the processing time slows it down
end

# checkmem: check unallocated memory for modifications
# this assumes that DIAGNOSTIC is set, which causes
# free memory to be set to 0xdeadc0de
#
# Use: checkmem offset length
define checkmem
    set $offset = $arg0
    # XXX sizeof int.   Needs changing for 64 bit machines.
    # subtract 1 because the last word is always different.
    set $length = $arg1 / 4 - 1
    set $word = 0
    while ($word < $length)
	if ((int *) $offset) [$word] != 0xdeadc0de
	    printf "invalid word 0x%x at 0x%x\n", ((int *) $offset) [$word], \
		&((int *) $offset) [$word]
	end
	set $word = $word + 1
    end
end

document checkmem
Check unallocated memory for modifications  This assumes that DIAGNOSTIC is set which causes free memory to be set to 0xdeadc0de.
end

define kldstat
    set $kld = linker_files.tqh_first
    printf "Id Refs Address    Size     Name\n"
    while ($kld != 0)
	printf "%2d %4d 0x%08x %-8x %s\n", \
	    $kld->id, $kld->refs, $kld->address, $kld->size, $kld->filename
	set $kld = $kld->link.tqe_next
    end
end
 
document kldstat
Lists the modules that were loaded when the kernel crashed.
end
 
define kldstat-v
    set $kld = linker_files.tqh_first
    printf "Id Refs Address    Size     Name\n"
    while ($kld != 0)
  	printf "%2d %4d 0x%08x %-8x %s\n", \
	    $kld->id, $kld->refs, $kld->address, $kld->size, $kld->filename
	printf "        Contains modules:\n"
	printf "                Id Name\n"
	set $module = $kld->modules.tqh_first
	while ($module != 0)
	    printf "                %2d %s\n", $module->id, $module->name
	    set $module = $module->link.tqe_next
	end
	set $kld = $kld->link.tqe_next
    end
end

# printpcpu <struct globaldata *>
# helper function for pcpu and allpcpu
define printpcpu
    set $_gd = $arg0
    printf "cpuid   = %d\n", $_gd.gd_cpuid
    printf "curproc = "
    if ($_gd.gd_curproc != 0)
	printf "%p: pid %d \"%s\"\n", $_gd.gd_curproc, \
	    $_gd.gd_curproc->p_pid, $_gd.gd_curproc->p_comm
    else
	printf "none\n"
    end
    printf "curpcb  = %p\n", $_gd.gd_curpcb
    printf "npxproc = "
    if ($_gd.gd_npxproc != 0)
	printf "%p: pid %d \"%s\"\n", $_gd.gd_npxproc, \
	    $_gd.gd_npxproc->p_pid, $_gd.gd_npxproc->p_comm
    else
	printf "none\n"
    end
end

define pcpu
    printpcpu ((struct privatespace *)SMP_prvspace)[$arg0].globaldata
end

document pcpu
Display per-CPU information for a specified CPU.
end

define allpcpu
    set $i = 0
    while ($i < mp_ncpus)
	printpcpu $i
	printf "\n"
    end
end

document allpcpu
Display per-CPU information for all CPUs.
end

define lockmgr_owner
    if (((struct lock *)$arg0)->lk_exclusivecount != 0)
	set $p = ((struct lock *)$arg0)->lk_lockholder
	printf "p: %p\n", $p
	printf "pid: %d, p_comm: %s\n", $p->p_pid, $p->p_comm
    end
    if (((struct lock *)$arg0)->lk_sharecount != 0)
	printf "share count: %d\n", ((struct lock *)$arg0)->lk_sharecount
    end    
end

document lockmgr_owner
Displays the owner of a given lockmgr lock
end

# vtypename <type>
# helper function for vprint
define vtypename
    if ($arg0 == VNON)
	printf "VNON"
    else
	if ($arg0 == VREG)
	    printf "VREG"
	else
	    if ($arg0 == VDIR)
		printf "VDIR"
	    else
		if ($arg0 == VBLK)
		    printf "VBLK"
		else
		    if ($arg0 == VCHR)
			printf "VCHR"
		    else
			if ($arg0 == VLNK)
			    printf "VLNK"
			else
			    if ($arg0 == VSOCK)
				printf "VSOCK"
			    else
				if ($arg0 == VFIFO)
				    printf "VFIFO"
				else
				    if ($arg0 == VBAD)
					printf "VBAD"
				    else
					printf "V??:%d", $arg0
				    end
				end
			    end
			end
		    end
		end
	    end
	end
    end
end

# vprint <vp>
# helper function to dump info about a vnode
define vprint
    set $vp = (struct vnode *)$arg0
    printf "%p: ", $vp
    printf "tag %s, type ", $vp->v_tag
    vtypename $vp->v_type
    printf "\n"
    printf "    usecount %d, writecount %d, refcount %d mountedhere %p\n", \
	$vp->v_usecount, $vp->v_writecount, $vp->v_holdcnt, $vp->v_un.vu_mount
    printf "    flags ("
    set $_pipe = 0
    if ($vp->v_flag & $VROOT)
	printf "VROOT"
	set $_pipe = 1
    end
    if ($vp->v_flag & $VTEXT)
	if ($_pipe)
	    printf "|"
	end
	printf "VTEXT"
	set $_pipe = 1
    end
    if ($vp->v_flag & $VSYSTEM)
	if ($_pipe)
	    printf "|"
	end
	printf "VSYSTEM"
	set $_pipe = 1
    end
    if ($vp->v_flag & $VDOOMED)
	if ($_pipe)
	    printf "|"
	end
	printf "VDOOMED"
	set $_pipe = 1
    end
    if ($vp->v_flag & $VFREE)
	if ($_pipe)
	    printf "|"
	end
	printf "VFREE"
	set $_pipe = 1
    end
    printf ")"
    printf "\n"
    set $_vobj = $vp->v_bufobj.bo_object
    if ($_vobj != 0)
	printf "    v_object %p ref %d pages %d\n", $_vobj, $_vobj->ref_count, \
	    $_vobj->resident_page_count
    end
    printf "    "
    # lockmgr_printinfo()
    set $_lkp = $vp->v_vnlock
    if ($_lkp->lk_sharecount)
	printf "lock type %s: SHARED (count %d)", $_lkp->lk_wmesg, \
	    $_lkp->lk_sharecount
    else
	if ($_lkp->lk_exclusivecount)
	    printf "lock type %s: EXCL (count %d) by proc %p (pid %d)", \
		$_lkp->lk_wmesg, $_lkp->lk_exclusivecount, \
		$_lkp->lk_lockholder, $_lkp->lk_lockholder->p_pid
	else
	    printf "lock type %s: UNLOCKED", $_lkp->lk_wmesg
	end
    end
    if ($_lkp->lk_waitcount > 0)
	printf " with %d pending", $_lkp->lk_waitcount
    end
    printf "\n"
    # XXX: no VOP_PRINT
end

define lockedvnodes
    printf "Locked vnodes\n"
    set $mp = mountlist.tqh_first
    while ($mp != 0)
	set $lvp = $mp->mnt_nvnodelist.tqh_first
	while ($lvp != 0)
	    if ($lvp->v_type != VMARKER && \
		($lvp->v_vnlock->lk_exclusivecount != 0 || \
		$lvp->v_vnlock->lk_sharecount != 0))
		vprint $lvp
	    end
	    set $lvp = $lvp->v_nmntvnodes.tqe_next
	end
	set $mp = $mp->mnt_list.tqe_next
    end
end

document lockedvnodes
List all of the locked vnodes in the system
end

# helper functions for sleepchain, return success or failure in $arg1 and
# if ok, owner in $arg2, $arg0 is proc
define lk_chain
    set $lkp = (struct lock *)$arg0->p_wchan
    # imperfect test to see if the wchan is a lockmgr lock maybe
    if ($lkp->lk_wmesg != $arg0->p_wmesg)
	# it might be sleeping on &lkp->lk_flags during a drain
	set $lkp = (struct lock *)((char *)$lkp - (int)(&((struct lock *)0)->lk_flags))
	if ($lkp->lk_wmesg != $arg0->p_wmesg || !($lkp->lk_flags & $LK_WAITDRAIN))
	    set $lkp = 0
	end
    end
    if ($lkp)
	set $arg1 = 1
	printf "blocked on lk \"%s\" ", $lkp->lk_wmesg
	if ($lkp->lk_sharecount)
	    printf "SHARED (count %d)", $lkp->lk_sharecount
	    set $arg2 = 0
	else
	    printf "EXCL (count %d)", $lkp->lk_exclusivecount
	    set $arg2 = $lkp->lk_lockholder
	end
    else
	set $arg1 = 0
    end
end

define sleepchain
    set $count = 20
    lookup_proc $arg0 $p
    while ($p != 0)
	printf " proc %d (%s) ", $p->p_pid, $p->p_comm
	if ($p->p_wchan != 0)
	    lk_chain $td $ok $owner
	    if ($ok != 0)
		set $p = $owner
		if ($p == $arg0 || --$count == 0)
		    printf "\n DEADLOCK"
		    set $p = 0
		end
	    else
		printf "non-lock sleep"
		set $p = 0
	    end
	else
	    set $p = 0
	end
	printf "\n"
    end	
end

document sleepchain
Like lockchain but for sleep locks
end

# sysctl_oid name namelen
def sysctl_oid
    set $oid = sysctl__children.slh_first
    set $index = 0
    while ($oid != 0 && $index < $arg1)
	if ($oid->oid_number == $arg0[$index])
	    set $index = $index + 1
	    printf "%6d: %s\n", $oid->oid_number, $oid->oid_name
	    if (($oid->oid_kind & $CTLTYPE) == $CTLTYPE_NODE)
		if ($oid->oid_handler != 0)
		    set $oid = 0
		else
		    set $oid = ((struct sysctl_oid_list *)$oid->oid_arg1)->slh_first
		end
	    else
		set $oid = 0
	    end
	else
	    set $oid = $oid->oid_link.sle_next
	end
    end
end

document sysctl_oid
Try to lookup the name of a sysctl OID.
end

def memstat
    printf "%8d K Active (%2d%%)\n", cnt.v_active_count * cnt.v_page_size / 1024, cnt.v_active_count * 100 / cnt.v_page_count
    printf "%8d K Inact  (%2d%%)\n", cnt.v_inactive_count * cnt.v_page_size / 1024, cnt.v_inactive_count * 100 / cnt.v_page_count
    printf "%8d K Wired  (%2d%%)\n", cnt.v_wire_count * cnt.v_page_size / 1024, cnt.v_wire_count * 100 / cnt.v_page_count
    printf "%8d K Cache  (%2d%%)\n", cnt.v_cache_count * cnt.v_page_size / 1024, cnt.v_cache_count * 100 / cnt.v_page_count
    printf "%8d K Buf\n", bufspace / $div
    printf "%8d K Free   (%2d%%)\n", cnt.v_free_count * cnt.v_page_size / 1024, cnt.v_free_count * 100 / cnt.v_page_count
end

document memstat
Show top-like memory usage summary
end

define devstate
    if ($arg0->state == DS_NOTPRESENT)
	printf "NOT PRESENT"
    else
	if ($arg0->state == DS_ALIVE)
	    printf "ALIVE      "
	else
	    if ($arg0->state == DS_ATTACHED)
		printf "ATTACHED   "
	    else
		if ($arg0->state == DS_BUSY)
		    printf "BUSY: %-5d", $arg0->busy
		else
		    printf "???: %-6d", $arg0->state
		end
	    end
	end
    end
end

define dumpdev
    set $foo = $PTRWIDTH - 4
    if ($dev->nameunit)
	printf "%-20s ", $dev->nameunit
    else
	printf "(null)               "
    end
    devstate $dev
    if ($dev->softc)
	printf " %p", $dev->softc
    else
	printf " NULL"
	spaces $foo
    end
    if ($dev->ivars)
	printf " %p", $dev->ivars
    else
	printf " NULL"
	spaces $foo
    end
    printf "\n"
end

# List device info as <name:20> <state:11> <softc> <ivars>
define lsdev
    printf "        name            state    "
    set $foo = ($PTRWIDTH - 5) / 2
    set $bar = $PTRWIDTH - 5 - $foo
    spaces $foo
    printf "softc"
    spaces $bar
    printf " "
    spaces $foo
    printf "ivars\n"
    set $dc = devclasses->tqh_first
    while ($dc != 0)
        set $i = 0
        while ($i < $dc->maxunit)
	    set $dev = $dc->devices[$i]
	    if ($dev != 0)
		dumpdev $dev
	    end
	    set $i = $i + 1
	end
	set $dc = $dc->link.tqe_next
    end
end

document lsdev
Show new-bus devices.
end

# Show the new-bus device tree
define devinfo
    set $indent = 0
    set $dev = root_bus
    set $ignore = 0
    while ($dev != 0)
	if ($dev->nameunit != 0 && $ignore == 0)
	    spaces $indent
	    printf "%s\n", $dev->nameunit
	end
	if ($dev->children.tqh_first != 0 && $ignore == 0)
	    set $dev = $dev->children.tqh_first
	    set $indent = $indent + 1
	    set $ignore = 0
	else
	    if ($dev->link.tqe_next != 0)
		set $dev = $dev->link.tqe_next
		set $ignore = 0
	    else
		set $indent = $indent - 1
		set $dev = $dev->parent
		set $ignore = 1
	    end
	end
    end
end

document devinfo
Show new-bus heirarchy similar to devinfo(8).
end
