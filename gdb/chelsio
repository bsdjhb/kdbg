# Chelsio-specific kernel macros

# T3 commands

# For each cxgb device, execute $arg0 passing the port_info structure as the
# argument
define fe_cxgb_helper
    if ($arg1->nameunit != 0)
	if ($arg1->nameunit[0] == 'c' && $arg1->nameunit[1] == 'x' && \
	    $arg1->nameunit[2] == 'g' && $arg1->nameunit[3] == 'b' && \
	    $arg1->nameunit[4] >= '0' && $arg1->nameunit[4] <= '9')
	    set $pi = (struct port_info *)$arg1->softc
	    $arg0 $pi
	end
    end
end

define fe_cxgb
    devwalk fe_cxgb_helper $arg0
end

# For each cxgbc device, execute $arg0 passing the adapter structure as the
# argument.  Note that we can't do a cast of the cxgbc softc directly,
# so instead this finds the first cxgb device on each controller and uses
# pi->adapter.
define fe_cxgbc_helper
    if ($arg1->nameunit != 0)
	if ($arg1->nameunit[0] == 'c' && $arg1->nameunit[1] == 'x' && \
	    $arg1->nameunit[2] == 'g' && $arg1->nameunit[3] == 'b' && \
	    $arg1->nameunit[4] >= '0' && $arg1->nameunit[4] <= '9')
	    if ($arg1->parent->children.tqh_first == $arg1)
		set $pi = (struct port_info *)$arg1->softc
		$arg0 $pi->adapter
	    end
	end
    end
end

define fe_cxgbc
    devwalk fe_cxgbc_helper $arg0
end

define tcam_helper
    printf "%s: %d entries", $arg0->dev->nameunit, $arg0->mc5.tcam_size
    if ($arg0->params.offload)
	printf " (offload)"
    end
    printf "\n"
end

define tcam
    fe_cxgbc tcam_helper
end

document tcam
Display number of TCAM entries for any Chelsio T3 adapters.
end

define filters_helper
    if ($arg0->filters != 0)
	printf "%s: %d filters:\n", $arg0->dev->nameunit, \
	    $arg0->params.mc5.nfilters
	set $i = 0
	while ($i < $arg0->params.mc5.nfilters)
	    set $f = $arg0->filters + $i
	    if ($f->valid)
		printf "%6d: ", $i
		print_ip &$f->sip
		printf ":"
		printf "%d ", $f->sport
		print_ip &$f->dip
		printf ":"
		printf "%d ", $f->dport
		if ($f->vlan != 0xfff)
		    printf "vlan %d ", $f->vlan
		end
		if ($f->pkt_type == 0)
		    printf "ANY  "
		else
		    if ($f->pkt_type == 1)
			printf "TCP  "
		    else
			if ($f->pkt_type == 2)
			    printf "UDP  "
			else
			    printf "FRAG "
			end
		    end
		end
		if ($f->pass)
		    printf "PASS "
		else
		    printf "DROP "
		end
		if ($f->rss == 0)
		    printf "Q:%d", $f->qset
		else
		    printf "RSS"
		end
		if ($f->locked)
		    printf " LK"
		end
		printf "\n"
	    end
	    set $i = $i + 1
	end
    end
end

define filters
    fe_cxgbc filters_helper
end

document filters
Display filter rules for any Chelsio T3 adapters.
end

define ctrlq_helper
    set $txq = $arg0->sge.qs[0].txq[2]
    printf "%s: size %d in_use %d processed %d cleaned %d\n", \
	$arg0->dev->nameunit, $txq->size, $txq->in_use, $txq->processed, \
	$txq->cleaned
end

define ctrlq
    fe_cxgbc ctrlq_helper
end

document ctrlq
Display ctrlq stats for any Chelsio T3 adapters.
end

set $F_RSPD_GEN2 = 1

define qset
    set $qs = (struct sge_qset *)$arg0
    printf "queueset %d:\n", $qs - $qs->port->adapter.sge.qs
    set $pending = 0
    set $idx = $qs->rspq.cidx
    set $r = $qs->rspq.desc[$idx]
    set $gen = $qs->rspq.gen
    while ($idx >= 0 && ($r->intr_gen & $F_RSPD_GEN2) == $gen)
	set $pending = $pending + 1
	set $idx = $idx + 1
	if ($idx == $qs->rspq.size)
	    set $idx = 0
	    set $gen = $gen ^ 1
	end
	if ($idx == $qs->rspq.cidx)
	    set $idx = -1
	end
	set $r = $qs->rspq.desc[$idx]
    end
    printf " rspq size: %d  cidx: %d  credits: %d pending: %d\n", \
	$qs->rspq.size, $qs->rspq.cidx, $qs->rspq.credits, $pending
    printf "  fl0 size: %d  cidx: %d\n", $qs->fl[0].size, $qs->fl[0].cidx
    printf "  fl1 size: %d  cidx: %d\n", $qs->fl[1].size, $qs->fl[1].cidx
end

document qset
Display stats about a SGE qset.
end

define qsets_helper
    printf "%s: queue sets:\n", $arg0->ifp->if_xname
    set $i = 0
    while ($i < $arg0->nqsets)
	set $qs = $arg0->adapter->sge.qs + $arg0->first_qset + $i
	printf "  %d: %p\n", $qs - $arg0->adapter->sge.qs, $qs
	set $i = $i + 1
    end
end

define qsets
    fe_cxgb qsets_helper
end

document qsets
List T3 queue sets.
end

define txd
    set $txd = $arg0
    set $cpl = (struct cpl_tx_pkt *)$txd
    if ($osrelease >= '8')
	bswap32 $cpl->wr.u.ilp32.wr_lo $_wrlo
	bswap32 $cpl->wr.u.ilp32.wr_hi $_wrhi
    else
	bswap32 $cpl->wr.wr_lo $_wrlo
	bswap32 $cpl->wr.wr_hi $_wrhi
    end
    printf "wr hi: 0x%08lx  lo: 0x%08lx\n", $_wrhi, $_wrlo
    bswap32 $cpl->cntrl $_cntrl
    bswap32 $cpl->len $_len
    printf "cntrl: 0x%08lx len: %u\n", $_cntrl, $_len & ~0x80000000
end

document txd
Dump T3 tx descriptor state.
end

# T4/T5 commands

# For each cxgbe or cxl device, execute $arg0 passing the port_info
# structure as the argument
define fe_cxgbe_helper
    if ($arg1->nameunit != 0)
	if ($arg1->nameunit[0] == 'c' && $arg1->nameunit[1] == 'x' && \
	    $arg1->nameunit[2] == 'g' && $arg1->nameunit[3] == 'b' && \
	    $arg1->nameunit[4] == 'e' && \
	    $arg1->nameunit[5] >= '0' && $arg1->nameunit[5] <= '9')
	    set $pi = (struct port_info *)$arg1->softc
	    $arg0 $pi
	end
	if ($arg1->nameunit[0] == 'c' && $arg1->nameunit[1] == 'x' && \
	    $arg1->nameunit[2] == 'l' && \
	    $arg1->nameunit[3] >= '0' && $arg1->nameunit[3] <= '9')
	    set $pi = (struct port_info *)$arg1->softc
	    $arg0 $pi
	end
	if ($arg1->nameunit[0] == 'c' && $arg1->nameunit[1] == 'c' && \
	    $arg1->nameunit[2] >= '0' && $arg1->nameunit[2] <= '9')
	    set $pi = (struct port_info *)$arg1->softc
	    $arg0 $pi
	end
    end
end

define fe_cxgbe
    devwalk fe_cxgbe_helper $arg0
end

set $S_RSPD_GEN = 7
set $M_RSPD_LEN = 0x7fffffff

set $S_RSPD_TYPE = 4
set $M_RSPD_TYPE = 0x3

set $X_RSPD_TYPE_FLBUF = 0
set $X_RSPD_TYPE_CPL = 1
set $X_RSPD_TYPE_INTR = 2

set $CPL_CLOSE_CON_RPL = 0x32
set $CPL_RX_DATA = 0x39
set $CPL_RX_PKT = 0x3B
set $CPL_PASS_ESTABLISH = 0x41
set $CPL_RX_DATA_DDP = 0x42
set $CPL_FW4_ACK = 0xC3

set $IQ_ESIZE = 64

set $DDP_ERR = 0xffe8000

set $F_DDP_BUF_IDX = 0x4000000

define cpl
    set $_ot = (union opcode_tid *)$arg0
    bswap32 $_ot->opcode_tid $_tid
    set $_tid = $_tid & 0xFFFFFF
    printf " CPL %02x tid %d", $_ot->opcode, $_tid
    if ($_ot->opcode == $CPL_CLOSE_CON_RPL)
	set $_cpl = (struct cpl_close_con_rpl *)$_ot
	bswap32 $_cpl->snd_nxt $_snd_nxt
	bswap32 $_cpl->rcv_nxt $_rcv_nxt
	printf " (CLOSE_CON_RPL) status %#x snd_nxt %d rcv_nxt %d", \
	    $_cpl->status, $_snd_nxt, $_rcv_nxt
    end
    if ($_ot->opcode == $CPL_RX_DATA)
	set $_cpl = (struct cpl_rx_data *)$_ot
	bswap16 $_cpl->len $_len
	printf " (RX_DATA) len %d", $_len
	if ($_cpl->ddp_off)
	    printf " DDP off"
	else
	    printf " DDP on"
	end
    end
    if ($_ot->opcode == $CPL_RX_PKT)
	set $_cpl = (struct cpl_rx_pkt *)$_ot
	printf " (RX_PKT)"
	if ($_cpl->vlan_ex)
	     bswap16 $_cpl->vlan $_vlan
	     printf " vlan %d", $_vlan
	end
    end
    if ($_ot->opcode == $CPL_PASS_ESTABLISH)
	set $_cpl = (struct cpl_pass_establish *)$_ot
	printf " (PASS_ESTABLISH)"
    end
    if ($_ot->opcode == $CPL_RX_DATA_DDP)
	set $_cpl = (struct cpl_rx_data_ddp *)$_ot
	printf " (RX_DATA_DDP)"
	bswap32 $_cpl->ddpvld $_vld
	if ($_vld & $DDP_ERR)
	    printf " invalid (%x)", $_vld
	else
	    bswap32 $_cpl->u.ddp_report $_report
	    bswap16 $_cpl->len $_len
	    printf " buf %d len %d", $_report & $F_DDP_BUF_IDX ? 1 : 0, $_len
	end
    end
    if ($_ot->opcode == $CPL_FW4_ACK)
	set $_cpl = (struct cpl_fw4_ack *)$_ot
	printf " (FW4_ACK)"
	bswap32 $_cpl->snd_nxt $_snd_nxt
	bswap32 $_cpl->snd_una $_snd_una
	printf " credits %d snd_nxt %d snd_una %d", $_cpl->credits, $_snd_nxt, \
	    $_snd_una
    end
end

define iq_msg
    set $_offset = (char *)$arg0->desc + ($arg1 * $IQ_ESIZE)
    set $_rss = (struct rss_header *)$_offset
    set $_ctrl = (struct rsp_ctrl *)($_offset + ($IQ_ESIZE - sizeof(struct rsp_ctrl)))
    set $_rspd_type = ($_ctrl->u.type_gen >> $S_RSPD_TYPE) & $M_RSPD_TYPE
    bswap16 $_rss->qid $_qid
    printf "[%2d]: gen %d qid %d", $arg1, $_ctrl->u.type_gen >> $S_RSPD_GEN, \
	$_qid
    bswap32 $_ctrl->pldbuflen_qid $_lq
    if $_rspd_type == $X_RSPD_TYPE_FLBUF
	printf " FLBUF len: %d CPL %02x", $_lq & $M_RSPD_LEN, $_rss->opcode
    else
	if $_rspd_type == $X_RSPD_TYPE_CPL
	    set $_cpl = $_rss + 1
	    cpl $_cpl
	else
	    if $_rspd_type == $X_RSPD_TYPE_INTR
		printf " INTR %d", $_lq
	    else
		printf " type %d", $_rspd_type
	    end
	end
    end
    printf "\n"
end

define iq_msg_raw
    set $_base = (char *)$arg0->desc + ($arg1 * $IQ_ESIZE)
    set $_offset = 0
    while ($_offset < $IQ_ESIZE)
	printf "%02x ", ((unsigned)*$_base) & 0xff
	set $_offset = $_offset + 1
	set $_base = $_base + 1
	if ($_offset % 16 == 0)
	    printf "\n"
	end
    end
end

define intrq
    set $_iq = (struct sge_iq *)$arg0
    printf "cntxt_id: %d  qsize: %d\n", $_iq->cntxt_id, $_iq->qsize
    set $_i = 0
    while ($_i < $_iq->qsize)
	iq_msg $_iq $_i
	set $_i = $_i + 1
    end
end

set $EQ_ESIZE = 64

set $S_FW_WR_OP = 24
set $M_FW_WR_OP = 0xff

set $S_FW_WR_IMMDLEN = 0
set $M_FW_WR_IMMDLEN = 0xff

set $F_FW_WR_EQUIQ = (1 << 31)
set $F_FW_WR_EQUEQ = (1 << 30)

set $S_FW_WR_LEN16 = 0
set $M_FW_WR_LEN16 = 0xff

set $FW_ULPTX_WR = 0x04
set $FW_TP_WR = 0x05
set $FW_ETH_TX_PKT_WR = 0x08
set $FW_ETH_TX_PKT_VM_WR = 0x11

set $S_CPL_OPCODE = 24

set $CPL_ACT_OPEN_REQ = 0x3
set $CPL_SET_TCB_FIELD = 0x5
set $CPL_TX_PKT = 0xe
set $CPL_TX_PKT_LSO = 0xed
set $CPL_TX_PKT_XT = 0xee

set $F_NO_REPLY = (1 << 15)

set $S_ULPTX_NSGE = 0
set $M_ULPTX_NSGE = 0xFFFF

define cpl_msg
    set $_ot = (union opcode_tid *)($_wr + 1)
    bswap32 $_ot->opcode_tid $_tid
    set $_tid = $_tid & 0xFFFFFF
    printf " CPL %02x tid %d", $_ot->opcode, $_tid
    if ($_ot->opcode == $CPL_ACT_OPEN_REQ)
	printf " ACT_OPEN_REQ"
    end
    if ($_ot->opcode == $CPL_SET_TCB_FIELD)
	printf " SET_TCB_FIELD"
	set $_cpl = (struct cpl_set_tcb_field_core *)$_ot
	bswap16 $_cpl->reply_ctrl $_reply_ctrl
	if ($_reply_ctrl & $F_NO_REPLY)
	    printf " NO_REPLY"
	end
	bswap16 $_cpl->word_cookie $_word_cookie
	printf " word %#x cookie %#x", $_word_cookie & 0x1F, \
	    ($_word_cookie >> 5) & 0x7
	bswap64 $_cpl->mask $_mask
	printf " mask %#lx", $_mask
	bswap64 $_cpl->val $_val
	printf " val %#lx", $_val
    end
    if ($_ot->opcode == $CPL_TX_PKT_LSO)
	printf " LSO"
	set $_lso = (struct cpl_tx_pkt_lso_core *)$_ot
	set $_ot = (union opcode_tid *)($_lso + 1)
	printf " CPL %02x", $_ot->opcode
    end
    if ($_ot->opcode == $CPL_TX_PKT || $_ot->opcode == $CPL_TX_PKT_XT)
	set $_cpl = (struct cpl_tx_pkt_core *)$_ot
	bswap16 $_cpl->len $_pktlen
	if ($_ot->opcode == $CPL_TX_PKT)
	    printf " TXPKT (pktlen %d)", $_pktlen
	else
	    printf " TXPKT_XT (pktlen %d)", $_pktlen
	end
	set $_immdlen = ($_op_immdlen >> $S_FW_WR_IMMDLEN) & $M_FW_WR_IMMDLEN
	# Subtract out LSO header if it exists
	set $_immdlen = $_immdlen - ((uintptr_t)$_ot - (uintptr_t)($_wr + 1))
	set $_immdlen = $_immdlen - sizeof(struct cpl_tx_pkt_core)
	if ($_immdlen > 0)
	    printf " immediate"
	else
	    set $_usgl = (struct ulptx_sgl *)($_cpl + 1)
	    bswap32 $_usgl->cmd_nsge $_cmd_nsge
	    set $_nsegs = ($_cmd_nsge >> $S_ULPTX_NSGE) & $M_ULPTX_NSGE
	    if ($eq_verbose)
	        set $_seg_idx = 1
		bswap64 $_usgl->addr0 $_sgaddr
		bswap32 $_usgl->len0 $_sglen
		printf "\n\t[0]: %#llx : %#x", $_sgaddr, $_sglen
		set $_segs = $_usgl->sge
		while ($_seg_idx + 1 < $_nsegs)
		    bswap64 $_segs->addr[0] $_sgaddr
		    bswap32 $_segs->len[0] $_sglen
		    printf "\n\t[%d]: %#llx : %#x", $_seg_idx, $_sgaddr, $_sglen
		    bswap64 $_segs->addr[1] $_sgaddr
		    bswap32 $_segs->len[1] $_sglen
		    printf "\n\t[%d]: %#llx : %#x", $_seg_idx + 1, $_sgaddr, \
		        $_sglen
		    set $_seg_idx = $_seg_idx + 2
		    set $_segs = $_segs + 1
		end
		if ($_seg_idx < $_nsegs)
		    bswap64 $_segs->addr[0] $_sgaddr
		    bswap32 $_segs->len[0] $_sglen
		    printf "\n\t[%d]: %#llx : %#x", $_seg_idx, $_sgaddr, $_sglen
		end
	    else
	        printf " %d segs", $_nsegs
	    end
	end
    end
end

define eq_msg
    set $_hdr = (uint32_t *)&$arg0->desc[$arg1]
    bswap32 $_hdr[0] $_op_immdlen
    bswap32 $_hdr[1] $_equiq_to_len16
    set $_wr_op = ($_op_immdlen >> $S_FW_WR_OP) & $M_FW_WR_OP
    set $_len16 = ($_equiq_to_len16 >> $S_FW_WR_LEN16) & $M_FW_WR_LEN16
    printf "[%2d]: fw op %#x len16 %d", $arg1, $_wr_op, $_len16
    if ($_equiq_to_len16 & $F_FW_WR_EQUIQ)
	printf " UIQ"
    end
    if ($_equiq_to_len16 & $F_FW_WR_EQUEQ)
	printf " UEQ"
    end
    if ($_wr_op == $FW_ULPTX_WR)
	#set $_wr = (struct fw_ulptx_wr *)$_hdr
	printf " ULPTX"
	# not a CPL, would have to parse ULPTX
    end
    if ($_wr_op == $FW_TP_WR)
	# Really struct fw_tp_wr, but this is the same size
	set $_wr = (struct fw_ulptx_wr *)$_hdr
	cpl_msg
    end
    if ($_wr_op == $FW_ETH_TX_PKT_WR)
	set $_wr = (struct fw_eth_tx_pkt_wr *)$_hdr
	cpl_msg
    end
    if ($_wr_op == $FW_ETH_TX_PKT_VM_WR)
	set $_wr = (struct fw_eth_tx_pkt_vm_wr *)$_hdr
	cpl_msg
    end
    printf "\n"
end

# <eq> <index>
define eq_msg_raw
    set $_base = (char *)&$arg0->desc[$arg1]
    set $_offset = 0
    while ($_offset < $EQ_ESIZE)
	printf "%02x ", ((unsigned)*$_base) & 0xff
	set $_offset = $_offset + 1
	set $_base = $_base + 1
	if ($_offset % 16 == 0)
	    printf "\n"
	end
    end
end

# <eq> <start> <count>
define eq_msgs
    set $_idx = $arg1
    set $_count = $arg2
    while ($_count-- > 0)
	eq_msg $arg0 $_idx
	if ($_len16 == 0)
	    set $_idx = $_idx + 1
	else
	    set $_idx = $_idx + ($_len16 + 3) / 4
	end
    end
end

# <eq> <start> <count>
define eq_msgs_raw
    set $_idx = $arg1
    set $_count = $arg2
    while ($_count-- > 0)
	eq_msg_raw $arg0 $_idx
        if ($_idx < $arg0->sidx - 1)
	    set $_idx = $_idx + 1
	else
	    set $_idx = 0
	end
    end
end

define eq_buf_ring
    set $_eq = (struct sge_eq *)$arg0
    printf "cntxt_id: %d  qsize: %d  cap:  %d\n", \
	$_eq->cntxt_id, $_eq->qsize, $_eq->cap
    bswap32 $_eq->spg->qid $_qid
    bswap16 $_eq->spg->cidx $_cidx
    bswap16 $_eq->spg->pidx $_pidx
    printf "spg qid: %d  cidx: %d  pidx:  %d\n", $_qid, $_cidx, $_pidx
end

define eq_mp_ring
    set $_eq = (struct sge_eq *)$arg0
    set $_eq_spg = (struct sge_qstat *)&$_eq->desc[$_eq->sidx]
    printf "cntxt_id: %d  sidx:  %d  cidx: %d  pidx: %d  dbidx: %d\n", \
	$_eq->cntxt_id, $_eq->sidx, $_eq->cidx, $_eq->pidx, $_eq->dbidx
    bswap32 $_eq_spg->qid $_qid
    bswap16 $_eq_spg->cidx $_cidx
    bswap16 $_eq_spg->pidx $_pidx
    printf "spg qid: %d  cidx: %d  pidx:  %d\n", $_qid, $_cidx, $_pidx
end

define eq
    # XXX: Not a perfect test
    if (osreldate >= 1100052 || (osreldate < 1100000 && osreldate >= 1001518))
	eq_mp_ring $arg0
    else
	eq_buf_ring $arg0
    end
end

define iq
    set $_iq = (struct sge_iq *)$arg0
    printf "cntxt_id: %d  qsize: %d\n", \
	$_iq->cntxt_id, $_iq->qsize
    set $_offset = (char *)$_iq->desc + (($_iq->qsize - 1) * $IQ_ESIZE)
    set $_iq_spg = (struct sge_qstat *)$_offset
    bswap32 $_iq_spg->qid $_qid
    bswap16 $_iq_spg->cidx $_cidx
    bswap16 $_iq_spg->pidx $_pidx
    printf "spg qid: %d  cidx: %d  pidx:  %d\n", $_qid, $_cidx, $_pidx
end

define queues_vi_helper
    printf "%s: queues:\n", $arg0->ifp->if_xname
    set $i = 0
    while ($i < $arg0->nrxq)
	printf "  rxq %d: %p\n", $i, $arg0->pi->adapter->sge.rxq + $arg0->first_rxq + $i
	set $i = $i + 1
    end
    set $i = 0
    while ($i < $arg0->ntxq)
	printf "  txq %d: %p\n", $i, $arg0->pi->adapter->sge.txq + $arg0->first_txq + $i
	set $i = $i + 1
    end
end

define queues_helper
    set $j = 0
    while ($j < $arg0->nvi)
	set $vi = &$arg0->vi[$j]
	queues_vi_helper $vi
	set $j = $j + 1
    end
end

define queues
    fe_cxgbe queues_helper
end

define toesock
    tcpsock $arg0
    set $toep = (struct toepcb *)$tp->t_toe
end

define vis_helper
    printf "%s: pi %p\n", $arg0->dev->nameunit, $arg0
    set $i = 0
    while ($i < $arg0->nvi)
	set $vi = &$arg0->vi[$i]
	printf " [%d]: %s: %p\n", $i, $vi->dev->nameunit, $vi
	set $i = $i + 1
    end
end

define vis
    fe_cxgbe vis_helper
end

define td_helper
    if $arg0->adapter->port[0] == $arg0
	printf "%s: td %p\n", $arg0->adapter->dev->nameunit, \
	    $arg0->adapter->tom_softc
    end
end

define toedevs
    fe_cxgbe td_helper
end
