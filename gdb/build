#!/bin/sh
#
# Setup a build env and build gdb similar to how ports builds it

usage()
{
	cat <<EOF
usage: build [-g gcc|-G] [-r sysroot] [-s gdbdir] -f config file
       build [-g gcc|-G] [-r sysroot] [-s gdbdir] [config]

       -f: path to a config file
       -g: gcc compiler to use
       -G: pick a default GCC for the config
       -r: path to a sysroot (defaults to / for native)
       -s: path to GDB source (defaults to pwd)
       config: built in configuration, native if none given
EOF
	exit 1
}

GDB_DIR=${PWD}
while getopts "f:Gg:r:s:" option; do
	case "$option" in
		f)
			config="$OPTARG"
			;;
		G)
			USE_GCC=yes
			;;
		g)
			WITH_GCC="$OPTARG"
			;;
		r)
			ROOTFS="$OPTARG"
			;;
		s)
			GDB_DIR="$OPTARG"
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND - 1))

# Check for invalid arguments
if [ $# -gt 1 ]; then
	usage
fi

if [ $# -eq 1 -a -n "$config" ]; then
	usage
fi

if [ -n "$USE_GCC" -a -n "$WITH_GCC" ]; then
	usage
fi

# Figure out some variables and set some defaults
version=`uname -r | cut -d- -f1`
arch=`uname -p`
case $arch in
	amd64)
		cfgarch=x86_64
		;;
	aarch64c)
		cfgarch=aarch64
		;;
	*)
		cfgarch=${arch}
		;;
esac

# Cross-compile configurations should set this to the triple
# to pass to --host
HOST=

LOCALBASE=/usr/local
CONFIGURE_ARGS=
CONFIGURE_ENV=
LDFLAGS=
PYTHON=
CHERI_SDK=/home/john/work/cheri/output/sdk
MORELLO_SDK=/home/john/work/cheri/output/morello-sdk

if [ -n "${WITH_GCC}" ]; then
	CC="${WITH_GCC}"
	CXX=$(echo ${WITH_GCC} | sed -e 's/gcc/g++/')
else
	CC="cc"
	CXX="c++"
fi

if [ -n "$config" ]; then
	if ! [ -r "$config" ]; then
		echo "Can't read config file"
		exit 1
	fi
	. ${config}
	config=
elif [ $# -eq 1 ]; then
	case "$1" in
		aarch64)
			obj=obj.aarch64
			: ${ROOTFS:="/mnt"}
			HOST=aarch64-freebsd
			CLANG_TARGET=aarch64-freebsd14.0
			AR=/usr/bin/ar
			;;
		morello)
			obj=obj.morello
			: ${ROOTFS:="/home/john/work/cheri/output/rootfs-morello-hybrid"}
			HOST=aarch64-freebsd
			CLANG_TARGET=aarch64-freebsd14.0
			CC_FLAGS="-march=morello -Xclang -morello-vararg=new"
			CC="${MORELLO_SDK}/bin/clang"
			CXX="${MORELLO_SDK}/bin/clang++"
			AR="${MORELLO_SDK}/bin/llvm-ar"
			;;
		aarch64c)
			obj=obj.aarch64c
			: ${ROOTFS:="/home/john/work/cheri/output/rootfs-morello-purecap"}
			HOST=aarch64-freebsd
			CLANG_TARGET=aarch64-freebsd14.0
			CC_FLAGS="-march=morello+c64 -mabi=purecap -Xclang -morello-vararg=new"
			CC="${MORELLO_SDK}/bin/clang"
			CXX="${MORELLO_SDK}/bin/clang++"
			AR="${MORELLO_SDK}/bin/llvm-ar"
			;;
		armv7)
			obj=obj.arm
			: ${ROOTFS:="/mnt"}
			HOST=arm-gnueabi-freebsd
			CLANG_TARGET=armv7-gnueabihf-freebsd14.0
			AR=/usr/bin/ar
			;;
		riscv64)
			obj=obj.riscv64
			: ${ROOTFS:="/home/john/work/qemu/riscv64/rootfs"}
			HOST=riscv64-freebsd
			CLANG_TARGET=riscv64-freebsd14.0
			CC_FLAGS="-march=rv64imafdc -mabi=lp64d"
			CLANG_CC_FLAGS="-mno-relax"
			if [ -n "${USE_GCC}" ]; then
				CC="riscv64-unknown-freebsd${version}-gcc"
				CXX="riscv64-unknown-freebsd${version}-g++"
			fi
			AR=/usr/bin/ar
			;;
		riscv64cheri)
			obj=obj.riscv64cheri
			: ${ROOTFS:="/home/john/work/cheri/output/rootfs-riscv64-hybrid"}
			HOST=riscv64-freebsd
			CLANG_TARGET=riscv64-freebsd14.0
			CC_FLAGS="-march=rv64imafdcxcheri -mabi=lp64d -mno-relax"
			CC="${CHERI_SDK}/bin/clang"
			CXX="${CHERI_SDK}/bin/clang++"
			AR="${CHERI_SDK}/bin/llvm-ar"
			;;		
		powerpc64)
			obj=obj.powerpc64
			: ${ROOTFS:="/qemu/ppc64/rootfs"}
			HOST=powerpc64-freebsd
			CLANG_TARGET=powerpc64-freebsd14.0
			if [ -n "${USE_GCC}" ]; then
				CC="powerpc64-unknown-freebsd${version}-gcc"
				CXX="powerpc64-unknown-freebsd${version}-g++"
			fi
			;;
		*)
			echo "Unknown configuration"
			exit 1
			;;
	esac
else
	case $arch in
		amd64)
			obj=obj
			;;
		aarch64c)
			obj=obj.morello
			LOCALBASE=/usr/local64
			CC_FLAGS="-mabi=aapcs"
			;;
		*)
			obj=obj.${arch}
			;;
	esac
	if [ -n "$WITH_GCC" ]; then
		obj=${obj}.gcc
		WANT_WERROR=yes
	fi
	if [ -n "$USE_GCC" ]; then
		echo "native doesn't support implicit gcc via -G"
		exit 1
	fi

	if [ -x ${LOCALBASE}/bin/python -a -z "${WITHOUT_PYTHON}" ]; then
		PYTHON="${LOCALBASE}/bin/python"
	fi
fi

cc_version=`${CC} -v 2>&1`
if [ $? -ne 0 ]; then
	echo "Compilers are not executable:"
	echo " CC=${CC}"
	echo " CXX=${CXX}"
	exit 1
fi

if echo "${cc_version}" | grep -q clang ; then
	# clang-specific warnings to disable
	EXTRA_CFLAGS="-Wno-absolute-value -Wno-parentheses-equality"
	EXTRA_CFLAGS="${EXTRA_CFLAGS} -Wno-unknown-warning-option"

	if [ -n "${CLANG_TARGET}" ]; then
		CC_FLAGS="-target ${CLANG_TARGET} ${CC_FLAGS}"
	fi
	CC_FLAGS="${CC_FLAGS} ${CLANG_CC_FLAGS}"
	: ${LDFLAGS:="-fuse-ld=lld -Wl,--gdb-index"}
fi
if [ -n "${ROOTFS}" ]; then
	CC_FLAGS="${CC_FLAGS} --sysroot=${ROOTFS}"
	CONFIGURE_ARGS="--with-build-sysroot=${ROOTFS}"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-rpath"
fi
CC="${CC} ${CC_FLAGS}"
CXX="${CXX} ${CC_FLAGS}"

if [ -n "${AR}" ]; then
	CONFIGURE_ENV="${CONFIGURE_ENV} AR=${AR}"
fi

if [ -n "${WITH_UBSAN}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --enable-ubsan"
else
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-ubsan"
fi

if [ -n "${PYTHON}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --with-python=${PYTHON}"
else
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --without-python"	
fi

if [ -n "${HOST}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --without-expat"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-source-highlight"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-sim"
	CONFIGURE_ENV="${CONFIGURE_ENV} gl_cv_func_gettimeofday_clobber=no"
else
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --with-expat"
fi

if [ -z "${WANT_BINUTILS}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-binutils"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-ld"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-gold"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-gas"
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-gprof"
fi

if [ -z "${WANT_SIM}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-sim"
fi

if [ -z "${WANT_WERROR}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-werror"
fi
	
# First, make an obj tree
mkdir $obj

# Next, run configure
CONFIGURE_ARGS="--enable-targets=all \
--with-separate-debug-dir=/usr/lib/debug \
--without-libunwind-ia64 --enable-tui \
--prefix=${ROOTFS}${LOCALBASE}  --mandir=${ROOTFS}${LOCALBASE}/man \
--infodir=${ROOTFS}${LOCALBASE}/info/ \
--build=${cfgarch}-portbld-freebsd${version} --disable-nls \
--with-system-zlib --enable-64-bit-bfd ${CONFIGURE_ARGS}"

if [ -n "${HOST}" ]; then
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --host=${HOST}"
fi

(cd $obj;
 env CC_FOR_BUILD="cc" CC="${CC}" CPP="cpp" CXX="${CXX}" \
     CFLAGS="-pipe  -DRL_NO_COMPAT -Wno-unused-function -Wno-unused-variable ${EXTRA_CFLAGS} -g -O2 -DLIBICONV_PLUG -g -fno-strict-aliasing -fcommon" \
     CPPFLAGS="-DLIBICONV_PLUG" \
     CXXFLAGS="-pipe -DRL_NO_COMPAT -Wno-unused-function -Wno-unused-variable ${EXTRA_CFLAGS} -g -O2 -DLIBICONV_PLUG -g -fno-strict-aliasing -fcommon" \
     LDFLAGS="${LDFLAGS}" LIBS="" \
     INSTALL="/usr/bin/install -c " \
     INSTALL_DATA="install   -m 0644" \
     INSTALL_LIB="install    -m 444" \
     INSTALL_PROGRAM="install    -m 555" \
     INSTALL_SCRIPT="install   -m 555" \
     CONFIGURED_M4=m4 CONFIGURED_BISON=byacc TMPDIR="/tmp" MAKE=gmake \
     PYTHON="${PYTHON}" SHELL=/bin/sh CONFIG_SHELL=/bin/sh \
     CONFIG_SITE=/usr/ports/Templates/config.site \
     lt_cv_sys_max_cmd_len=262144 ${CONFIGURE_ENV} \
     ${GDB_DIR}/configure ${CONFIGURE_ARGS} )
